import os
import logging
import whisper
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Whisper (–º–æ–¥–µ–ª—å base)
whisper_model = whisper.load_model("base")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
tasks = {}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî AI-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å ü§ñ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º, –∏ —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/–¥–æ–±–∞–≤–∏—Ç—å ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/–≤—Å–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"
    )


# –ö–æ–º–∞–Ω–¥–∞ /–¥–æ–±–∞–≤–∏—Ç—å
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_text = ' '.join(context.args)
    if not task_text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /–¥–æ–±–∞–≤–∏—Ç—å –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ")
        return
    tasks.setdefault(user_id, []).append(task_text)
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


# –ö–æ–º–∞–Ω–¥–∞ /–≤—Å–µ
async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_tasks = tasks.get(user_id, [])
    if not user_tasks:
        await update.message.reply_text("üóíÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return
    response = "\n".join([f"{i+1}. {task}" for i, task in enumerate(user_tasks)])
    await update.message.reply_text("üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n" + response)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Whisper
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = await update.message.voice.get_file()
    voice_path = f"voice_{update.message.message_id}.ogg"
    await file.download_to_drive(voice_path)
    await update.message.reply_text("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")

    try:
        audio = whisper.load_audio(voice_path)
        audio = whisper.pad_or_trim(audio)
        mel = whisper.log_mel_spectrogram(audio).to(whisper_model.device)
        _, probs = whisper_model.detect_language(mel)
        transcription = whisper_model.transcribe(audio)
        transcribed_text = transcription["text"]
        await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcribed_text}")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {str(e)}")
        return


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–¥–æ–±–∞–≤–∏—Ç—å", add_task))
    app.add_handler(CommandHandler("–≤—Å–µ", list_tasks))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
